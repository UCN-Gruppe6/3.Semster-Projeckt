//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC_Client.PcPart {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CPU", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Hardware")]
    [System.SerializableAttribute()]
    public partial class CPU : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BaseClockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BoostClockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CPUIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUnlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_Client.PcPart.Socket SocketField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SocketIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BaseClock {
            get {
                return this.BaseClockField;
            }
            set {
                if ((this.BaseClockField.Equals(value) != true)) {
                    this.BaseClockField = value;
                    this.RaisePropertyChanged("BaseClock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BoostClock {
            get {
                return this.BoostClockField;
            }
            set {
                if ((this.BoostClockField.Equals(value) != true)) {
                    this.BoostClockField = value;
                    this.RaisePropertyChanged("BoostClock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CPUId {
            get {
                return this.CPUIdField;
            }
            set {
                if ((this.CPUIdField.Equals(value) != true)) {
                    this.CPUIdField = value;
                    this.RaisePropertyChanged("CPUId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUnlocked {
            get {
                return this.IsUnlockedField;
            }
            set {
                if ((this.IsUnlockedField.Equals(value) != true)) {
                    this.IsUnlockedField = value;
                    this.RaisePropertyChanged("IsUnlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelNumber {
            get {
                return this.ModelNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelNumberField, value) != true)) {
                    this.ModelNumberField = value;
                    this.RaisePropertyChanged("ModelNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_Client.PcPart.Socket Socket {
            get {
                return this.SocketField;
            }
            set {
                if ((object.ReferenceEquals(this.SocketField, value) != true)) {
                    this.SocketField = value;
                    this.RaisePropertyChanged("Socket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SocketId {
            get {
                return this.SocketIdField;
            }
            set {
                if ((this.SocketIdField.Equals(value) != true)) {
                    this.SocketIdField = value;
                    this.RaisePropertyChanged("SocketId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Socket", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Hardware")]
    [System.SerializableAttribute()]
    public partial class Socket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArchitectureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SocketTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Architecture {
            get {
                return this.ArchitectureField;
            }
            set {
                if ((object.ReferenceEquals(this.ArchitectureField, value) != true)) {
                    this.ArchitectureField = value;
                    this.RaisePropertyChanged("Architecture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SocketType {
            get {
                return this.SocketTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SocketTypeField, value) != true)) {
                    this.SocketTypeField = value;
                    this.RaisePropertyChanged("SocketType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Storage", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Hardware")]
    [System.SerializableAttribute()]
    public partial class Storage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StorageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((this.CapacityField.Equals(value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Manufacturer {
            get {
                return this.ManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerField, value) != true)) {
                    this.ManufacturerField = value;
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StorageId {
            get {
                return this.StorageIdField;
            }
            set {
                if ((this.StorageIdField.Equals(value) != true)) {
                    this.StorageIdField = value;
                    this.RaisePropertyChanged("StorageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RAM", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Hardware")]
    [System.SerializableAttribute()]
    public partial class RAM : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RAMIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((this.CapacityField.Equals(value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Manufacturer {
            get {
                return this.ManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerField, value) != true)) {
                    this.ManufacturerField = value;
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RAMId {
            get {
                return this.RAMIdField;
            }
            set {
                if ((this.RAMIdField.Equals(value) != true)) {
                    this.RAMIdField = value;
                    this.RaisePropertyChanged("RAMId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Motherboard", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Hardware")]
    [System.SerializableAttribute()]
    public partial class Motherboard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChipsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MotherboardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Chipset {
            get {
                return this.ChipsetField;
            }
            set {
                if ((object.ReferenceEquals(this.ChipsetField, value) != true)) {
                    this.ChipsetField = value;
                    this.RaisePropertyChanged("Chipset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Manufacturer {
            get {
                return this.ManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerField, value) != true)) {
                    this.ManufacturerField = value;
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MotherboardId {
            get {
                return this.MotherboardIdField;
            }
            set {
                if ((this.MotherboardIdField.Equals(value) != true)) {
                    this.MotherboardIdField = value;
                    this.RaisePropertyChanged("MotherboardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GPU", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Hardware")]
    [System.SerializableAttribute()]
    public partial class GPU : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BoardpartnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GPUIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VRamAmountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Boardpartner {
            get {
                return this.BoardpartnerField;
            }
            set {
                if ((object.ReferenceEquals(this.BoardpartnerField, value) != true)) {
                    this.BoardpartnerField = value;
                    this.RaisePropertyChanged("Boardpartner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GPUId {
            get {
                return this.GPUIdField;
            }
            set {
                if ((this.GPUIdField.Equals(value) != true)) {
                    this.GPUIdField = value;
                    this.RaisePropertyChanged("GPUId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Manufacturer {
            get {
                return this.ManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerField, value) != true)) {
                    this.ManufacturerField = value;
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VRamAmount {
            get {
                return this.VRamAmountField;
            }
            set {
                if ((this.VRamAmountField.Equals(value) != true)) {
                    this.VRamAmountField = value;
                    this.RaisePropertyChanged("VRamAmount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Computer_Case", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Hardware")]
    [System.SerializableAttribute()]
    public partial class Computer_Case : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Manufacturer {
            get {
                return this.ManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerField, value) != true)) {
                    this.ManufacturerField = value;
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer")]
    [System.SerializableAttribute()]
    public partial class Customer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZIPCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((this.PhoneNumberField.Equals(value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZIPCode {
            get {
                return this.ZIPCodeField;
            }
            set {
                if ((this.ZIPCodeField.Equals(value) != true)) {
                    this.ZIPCodeField = value;
                    this.RaisePropertyChanged("ZIPCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Basket", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Basket")]
    [System.SerializableAttribute()]
    public partial class Basket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BasketIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_Client.PcPart.Computer_Case MyComputerCaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_Client.PcPart.CPU MyCpuField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_Client.PcPart.Customer MyCustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_Client.PcPart.GPU MyGpuField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_Client.PcPart.Motherboard MyMotherboardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_Client.PcPart.RAM MyRamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_Client.PcPart.Storage MyStorageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BasketID {
            get {
                return this.BasketIDField;
            }
            set {
                if ((this.BasketIDField.Equals(value) != true)) {
                    this.BasketIDField = value;
                    this.RaisePropertyChanged("BasketID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_Client.PcPart.Computer_Case MyComputerCase {
            get {
                return this.MyComputerCaseField;
            }
            set {
                if ((object.ReferenceEquals(this.MyComputerCaseField, value) != true)) {
                    this.MyComputerCaseField = value;
                    this.RaisePropertyChanged("MyComputerCase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_Client.PcPart.CPU MyCpu {
            get {
                return this.MyCpuField;
            }
            set {
                if ((object.ReferenceEquals(this.MyCpuField, value) != true)) {
                    this.MyCpuField = value;
                    this.RaisePropertyChanged("MyCpu");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_Client.PcPart.Customer MyCustomer {
            get {
                return this.MyCustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.MyCustomerField, value) != true)) {
                    this.MyCustomerField = value;
                    this.RaisePropertyChanged("MyCustomer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_Client.PcPart.GPU MyGpu {
            get {
                return this.MyGpuField;
            }
            set {
                if ((object.ReferenceEquals(this.MyGpuField, value) != true)) {
                    this.MyGpuField = value;
                    this.RaisePropertyChanged("MyGpu");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_Client.PcPart.Motherboard MyMotherboard {
            get {
                return this.MyMotherboardField;
            }
            set {
                if ((object.ReferenceEquals(this.MyMotherboardField, value) != true)) {
                    this.MyMotherboardField = value;
                    this.RaisePropertyChanged("MyMotherboard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_Client.PcPart.RAM MyRam {
            get {
                return this.MyRamField;
            }
            set {
                if ((object.ReferenceEquals(this.MyRamField, value) != true)) {
                    this.MyRamField = value;
                    this.RaisePropertyChanged("MyRam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_Client.PcPart.Storage MyStorage {
            get {
                return this.MyStorageField;
            }
            set {
                if ((object.ReferenceEquals(this.MyStorageField, value) != true)) {
                    this.MyStorageField = value;
                    this.RaisePropertyChanged("MyStorage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PcPart.IPcPartService")]
    public interface IPcPartService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/CreateCPU", ReplyAction="http://tempuri.org/IPcPartService/CreateCPUResponse")]
        void CreateCPU(MVC_Client.PcPart.CPU cpu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/CreateCPU", ReplyAction="http://tempuri.org/IPcPartService/CreateCPUResponse")]
        System.Threading.Tasks.Task CreateCPUAsync(MVC_Client.PcPart.CPU cpu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/UpdateCPU", ReplyAction="http://tempuri.org/IPcPartService/UpdateCPUResponse")]
        void UpdateCPU(MVC_Client.PcPart.CPU cpu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/UpdateCPU", ReplyAction="http://tempuri.org/IPcPartService/UpdateCPUResponse")]
        System.Threading.Tasks.Task UpdateCPUAsync(MVC_Client.PcPart.CPU cpu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/DeleteCPU", ReplyAction="http://tempuri.org/IPcPartService/DeleteCPUResponse")]
        void DeleteCPU(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/DeleteCPU", ReplyAction="http://tempuri.org/IPcPartService/DeleteCPUResponse")]
        System.Threading.Tasks.Task DeleteCPUAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCPUsByBrand", ReplyAction="http://tempuri.org/IPcPartService/FindCPUsByBrandResponse")]
        MVC_Client.PcPart.CPU[] FindCPUsByBrand(string Brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCPUsByBrand", ReplyAction="http://tempuri.org/IPcPartService/FindCPUsByBrandResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindCPUsByBrandAsync(string Brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCPUsByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindCPUsByCategoryResponse")]
        MVC_Client.PcPart.CPU[] FindCPUsByCategory(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCPUsByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindCPUsByCategoryResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindCPUsByCategoryAsync(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllCPUs", ReplyAction="http://tempuri.org/IPcPartService/FindAllCPUsResponse")]
        MVC_Client.PcPart.CPU[] FindAllCPUs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllCPUs", ReplyAction="http://tempuri.org/IPcPartService/FindAllCPUsResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindAllCPUsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCPUbyId", ReplyAction="http://tempuri.org/IPcPartService/FindCPUbyIdResponse")]
        MVC_Client.PcPart.CPU FindCPUbyId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCPUbyId", ReplyAction="http://tempuri.org/IPcPartService/FindCPUbyIdResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.CPU> FindCPUbyIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindStorageByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindStorageByManufacturerResponse")]
        MVC_Client.PcPart.Storage[] FindStorageByManufacturer(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindStorageByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindStorageByManufacturerResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Storage[]> FindStorageByManufacturerAsync(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindStorageByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindStorageByCategoryResponse")]
        MVC_Client.PcPart.Storage[] FindStorageByCategory(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindStorageByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindStorageByCategoryResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Storage[]> FindStorageByCategoryAsync(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllStorage", ReplyAction="http://tempuri.org/IPcPartService/FindAllStorageResponse")]
        MVC_Client.PcPart.Storage[] FindAllStorage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllStorage", ReplyAction="http://tempuri.org/IPcPartService/FindAllStorageResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Storage[]> FindAllStorageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindRamByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindRamByManufacturerResponse")]
        MVC_Client.PcPart.RAM[] FindRamByManufacturer(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindRamByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindRamByManufacturerResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.RAM[]> FindRamByManufacturerAsync(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindRamByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindRamByCategoryResponse")]
        MVC_Client.PcPart.RAM[] FindRamByCategory(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindRamByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindRamByCategoryResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.RAM[]> FindRamByCategoryAsync(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllRam", ReplyAction="http://tempuri.org/IPcPartService/FindAllRamResponse")]
        MVC_Client.PcPart.RAM[] FindAllRam();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllRam", ReplyAction="http://tempuri.org/IPcPartService/FindAllRamResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.RAM[]> FindAllRamAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindMotherboardByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindMotherboardByManufacturerResponse")]
        MVC_Client.PcPart.Motherboard[] FindMotherboardByManufacturer(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindMotherboardByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindMotherboardByManufacturerResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Motherboard[]> FindMotherboardByManufacturerAsync(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindMotherboardByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindMotherboardByCategoryResponse")]
        MVC_Client.PcPart.Motherboard[] FindMotherboardByCategory(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindMotherboardByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindMotherboardByCategoryResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Motherboard[]> FindMotherboardByCategoryAsync(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllMotherboard", ReplyAction="http://tempuri.org/IPcPartService/FindAllMotherboardResponse")]
        MVC_Client.PcPart.Motherboard[] FindAllMotherboard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllMotherboard", ReplyAction="http://tempuri.org/IPcPartService/FindAllMotherboardResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Motherboard[]> FindAllMotherboardAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindGpuByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindGpuByManufacturerResponse")]
        MVC_Client.PcPart.GPU[] FindGpuByManufacturer(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindGpuByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindGpuByManufacturerResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.GPU[]> FindGpuByManufacturerAsync(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindGpuByModel", ReplyAction="http://tempuri.org/IPcPartService/FindGpuByModelResponse")]
        MVC_Client.PcPart.GPU[] FindGpuByModel(string Model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindGpuByModel", ReplyAction="http://tempuri.org/IPcPartService/FindGpuByModelResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.GPU[]> FindGpuByModelAsync(string Model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindGpuByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindGpuByCategoryResponse")]
        MVC_Client.PcPart.GPU[] FindGpuByCategory(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindGpuByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindGpuByCategoryResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.GPU[]> FindGpuByCategoryAsync(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllGpus", ReplyAction="http://tempuri.org/IPcPartService/FindAllGpusResponse")]
        MVC_Client.PcPart.GPU[] FindAllGpus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllGpus", ReplyAction="http://tempuri.org/IPcPartService/FindAllGpusResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.GPU[]> FindAllGpusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindComputerCaseByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindComputerCaseByManufacturerResponse")]
        MVC_Client.PcPart.Computer_Case[] FindComputerCaseByManufacturer(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindComputerCaseByManufacturer", ReplyAction="http://tempuri.org/IPcPartService/FindComputerCaseByManufacturerResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Computer_Case[]> FindComputerCaseByManufacturerAsync(string Manufacturer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindComputerCaseByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindComputerCaseByCategoryResponse")]
        MVC_Client.PcPart.Computer_Case[] FindComputerCaseByCategory(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindComputerCaseByCategory", ReplyAction="http://tempuri.org/IPcPartService/FindComputerCaseByCategoryResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Computer_Case[]> FindComputerCaseByCategoryAsync(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllComputerCases", ReplyAction="http://tempuri.org/IPcPartService/FindAllComputerCasesResponse")]
        MVC_Client.PcPart.Computer_Case[] FindAllComputerCases();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllComputerCases", ReplyAction="http://tempuri.org/IPcPartService/FindAllComputerCasesResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Computer_Case[]> FindAllComputerCasesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/CreateCustomer", ReplyAction="http://tempuri.org/IPcPartService/CreateCustomerResponse")]
        void CreateCustomer(MVC_Client.PcPart.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/CreateCustomer", ReplyAction="http://tempuri.org/IPcPartService/CreateCustomerResponse")]
        System.Threading.Tasks.Task CreateCustomerAsync(MVC_Client.PcPart.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/UpdateCustomer", ReplyAction="http://tempuri.org/IPcPartService/UpdateCustomerResponse")]
        void UpdateCustomer(MVC_Client.PcPart.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/UpdateCustomer", ReplyAction="http://tempuri.org/IPcPartService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task UpdateCustomerAsync(MVC_Client.PcPart.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/DeleteCustomer", ReplyAction="http://tempuri.org/IPcPartService/DeleteCustomerResponse")]
        void DeleteCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/DeleteCustomer", ReplyAction="http://tempuri.org/IPcPartService/DeleteCustomerResponse")]
        System.Threading.Tasks.Task DeleteCustomerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCustomerById", ReplyAction="http://tempuri.org/IPcPartService/FindCustomerByIdResponse")]
        MVC_Client.PcPart.Customer FindCustomerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCustomerById", ReplyAction="http://tempuri.org/IPcPartService/FindCustomerByIdResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Customer> FindCustomerByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCustomerByName", ReplyAction="http://tempuri.org/IPcPartService/FindCustomerByNameResponse")]
        MVC_Client.PcPart.Customer[] FindCustomerByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindCustomerByName", ReplyAction="http://tempuri.org/IPcPartService/FindCustomerByNameResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Customer[]> FindCustomerByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllCustomers", ReplyAction="http://tempuri.org/IPcPartService/FindAllCustomersResponse")]
        MVC_Client.PcPart.Customer[] FindAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindAllCustomers", ReplyAction="http://tempuri.org/IPcPartService/FindAllCustomersResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Customer[]> FindAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/CreateBasket", ReplyAction="http://tempuri.org/IPcPartService/CreateBasketResponse")]
        void CreateBasket(MVC_Client.PcPart.Basket basket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/CreateBasket", ReplyAction="http://tempuri.org/IPcPartService/CreateBasketResponse")]
        System.Threading.Tasks.Task CreateBasketAsync(MVC_Client.PcPart.Basket basket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindSocket", ReplyAction="http://tempuri.org/IPcPartService/FindSocketResponse")]
        MVC_Client.PcPart.Socket FindSocket(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartService/FindSocket", ReplyAction="http://tempuri.org/IPcPartService/FindSocketResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.Socket> FindSocketAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPcPartServiceChannel : MVC_Client.PcPart.IPcPartService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PcPartServiceClient : System.ServiceModel.ClientBase<MVC_Client.PcPart.IPcPartService>, MVC_Client.PcPart.IPcPartService {
        
        public PcPartServiceClient() {
        }
        
        public PcPartServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PcPartServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PcPartServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PcPartServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateCPU(MVC_Client.PcPart.CPU cpu) {
            base.Channel.CreateCPU(cpu);
        }
        
        public System.Threading.Tasks.Task CreateCPUAsync(MVC_Client.PcPart.CPU cpu) {
            return base.Channel.CreateCPUAsync(cpu);
        }
        
        public void UpdateCPU(MVC_Client.PcPart.CPU cpu) {
            base.Channel.UpdateCPU(cpu);
        }
        
        public System.Threading.Tasks.Task UpdateCPUAsync(MVC_Client.PcPart.CPU cpu) {
            return base.Channel.UpdateCPUAsync(cpu);
        }
        
        public void DeleteCPU(int id) {
            base.Channel.DeleteCPU(id);
        }
        
        public System.Threading.Tasks.Task DeleteCPUAsync(int id) {
            return base.Channel.DeleteCPUAsync(id);
        }
        
        public MVC_Client.PcPart.CPU[] FindCPUsByBrand(string Brand) {
            return base.Channel.FindCPUsByBrand(Brand);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindCPUsByBrandAsync(string Brand) {
            return base.Channel.FindCPUsByBrandAsync(Brand);
        }
        
        public MVC_Client.PcPart.CPU[] FindCPUsByCategory(string Category) {
            return base.Channel.FindCPUsByCategory(Category);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindCPUsByCategoryAsync(string Category) {
            return base.Channel.FindCPUsByCategoryAsync(Category);
        }
        
        public MVC_Client.PcPart.CPU[] FindAllCPUs() {
            return base.Channel.FindAllCPUs();
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindAllCPUsAsync() {
            return base.Channel.FindAllCPUsAsync();
        }
        
        public MVC_Client.PcPart.CPU FindCPUbyId(int id) {
            return base.Channel.FindCPUbyId(id);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.CPU> FindCPUbyIdAsync(int id) {
            return base.Channel.FindCPUbyIdAsync(id);
        }
        
        public MVC_Client.PcPart.Storage[] FindStorageByManufacturer(string Manufacturer) {
            return base.Channel.FindStorageByManufacturer(Manufacturer);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Storage[]> FindStorageByManufacturerAsync(string Manufacturer) {
            return base.Channel.FindStorageByManufacturerAsync(Manufacturer);
        }
        
        public MVC_Client.PcPart.Storage[] FindStorageByCategory(string Category) {
            return base.Channel.FindStorageByCategory(Category);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Storage[]> FindStorageByCategoryAsync(string Category) {
            return base.Channel.FindStorageByCategoryAsync(Category);
        }
        
        public MVC_Client.PcPart.Storage[] FindAllStorage() {
            return base.Channel.FindAllStorage();
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Storage[]> FindAllStorageAsync() {
            return base.Channel.FindAllStorageAsync();
        }
        
        public MVC_Client.PcPart.RAM[] FindRamByManufacturer(string Manufacturer) {
            return base.Channel.FindRamByManufacturer(Manufacturer);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.RAM[]> FindRamByManufacturerAsync(string Manufacturer) {
            return base.Channel.FindRamByManufacturerAsync(Manufacturer);
        }
        
        public MVC_Client.PcPart.RAM[] FindRamByCategory(string Category) {
            return base.Channel.FindRamByCategory(Category);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.RAM[]> FindRamByCategoryAsync(string Category) {
            return base.Channel.FindRamByCategoryAsync(Category);
        }
        
        public MVC_Client.PcPart.RAM[] FindAllRam() {
            return base.Channel.FindAllRam();
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.RAM[]> FindAllRamAsync() {
            return base.Channel.FindAllRamAsync();
        }
        
        public MVC_Client.PcPart.Motherboard[] FindMotherboardByManufacturer(string Manufacturer) {
            return base.Channel.FindMotherboardByManufacturer(Manufacturer);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Motherboard[]> FindMotherboardByManufacturerAsync(string Manufacturer) {
            return base.Channel.FindMotherboardByManufacturerAsync(Manufacturer);
        }
        
        public MVC_Client.PcPart.Motherboard[] FindMotherboardByCategory(string Category) {
            return base.Channel.FindMotherboardByCategory(Category);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Motherboard[]> FindMotherboardByCategoryAsync(string Category) {
            return base.Channel.FindMotherboardByCategoryAsync(Category);
        }
        
        public MVC_Client.PcPart.Motherboard[] FindAllMotherboard() {
            return base.Channel.FindAllMotherboard();
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Motherboard[]> FindAllMotherboardAsync() {
            return base.Channel.FindAllMotherboardAsync();
        }
        
        public MVC_Client.PcPart.GPU[] FindGpuByManufacturer(string Manufacturer) {
            return base.Channel.FindGpuByManufacturer(Manufacturer);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.GPU[]> FindGpuByManufacturerAsync(string Manufacturer) {
            return base.Channel.FindGpuByManufacturerAsync(Manufacturer);
        }
        
        public MVC_Client.PcPart.GPU[] FindGpuByModel(string Model) {
            return base.Channel.FindGpuByModel(Model);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.GPU[]> FindGpuByModelAsync(string Model) {
            return base.Channel.FindGpuByModelAsync(Model);
        }
        
        public MVC_Client.PcPart.GPU[] FindGpuByCategory(string Category) {
            return base.Channel.FindGpuByCategory(Category);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.GPU[]> FindGpuByCategoryAsync(string Category) {
            return base.Channel.FindGpuByCategoryAsync(Category);
        }
        
        public MVC_Client.PcPart.GPU[] FindAllGpus() {
            return base.Channel.FindAllGpus();
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.GPU[]> FindAllGpusAsync() {
            return base.Channel.FindAllGpusAsync();
        }
        
        public MVC_Client.PcPart.Computer_Case[] FindComputerCaseByManufacturer(string Manufacturer) {
            return base.Channel.FindComputerCaseByManufacturer(Manufacturer);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Computer_Case[]> FindComputerCaseByManufacturerAsync(string Manufacturer) {
            return base.Channel.FindComputerCaseByManufacturerAsync(Manufacturer);
        }
        
        public MVC_Client.PcPart.Computer_Case[] FindComputerCaseByCategory(string Category) {
            return base.Channel.FindComputerCaseByCategory(Category);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Computer_Case[]> FindComputerCaseByCategoryAsync(string Category) {
            return base.Channel.FindComputerCaseByCategoryAsync(Category);
        }
        
        public MVC_Client.PcPart.Computer_Case[] FindAllComputerCases() {
            return base.Channel.FindAllComputerCases();
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Computer_Case[]> FindAllComputerCasesAsync() {
            return base.Channel.FindAllComputerCasesAsync();
        }
        
        public void CreateCustomer(MVC_Client.PcPart.Customer customer) {
            base.Channel.CreateCustomer(customer);
        }
        
        public System.Threading.Tasks.Task CreateCustomerAsync(MVC_Client.PcPart.Customer customer) {
            return base.Channel.CreateCustomerAsync(customer);
        }
        
        public void UpdateCustomer(MVC_Client.PcPart.Customer customer) {
            base.Channel.UpdateCustomer(customer);
        }
        
        public System.Threading.Tasks.Task UpdateCustomerAsync(MVC_Client.PcPart.Customer customer) {
            return base.Channel.UpdateCustomerAsync(customer);
        }
        
        public void DeleteCustomer(int id) {
            base.Channel.DeleteCustomer(id);
        }
        
        public System.Threading.Tasks.Task DeleteCustomerAsync(int id) {
            return base.Channel.DeleteCustomerAsync(id);
        }
        
        public MVC_Client.PcPart.Customer FindCustomerById(int id) {
            return base.Channel.FindCustomerById(id);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Customer> FindCustomerByIdAsync(int id) {
            return base.Channel.FindCustomerByIdAsync(id);
        }
        
        public MVC_Client.PcPart.Customer[] FindCustomerByName(string name) {
            return base.Channel.FindCustomerByName(name);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Customer[]> FindCustomerByNameAsync(string name) {
            return base.Channel.FindCustomerByNameAsync(name);
        }
        
        public MVC_Client.PcPart.Customer[] FindAllCustomers() {
            return base.Channel.FindAllCustomers();
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Customer[]> FindAllCustomersAsync() {
            return base.Channel.FindAllCustomersAsync();
        }
        
        public void CreateBasket(MVC_Client.PcPart.Basket basket) {
            base.Channel.CreateBasket(basket);
        }
        
        public System.Threading.Tasks.Task CreateBasketAsync(MVC_Client.PcPart.Basket basket) {
            return base.Channel.CreateBasketAsync(basket);
        }
        
        public MVC_Client.PcPart.Socket FindSocket(int id) {
            return base.Channel.FindSocket(id);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.Socket> FindSocketAsync(int id) {
            return base.Channel.FindSocketAsync(id);
        }
    }
}
