//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC_Client.PcPart {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CPU", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Hardware")]
    [System.SerializableAttribute()]
    public partial class CPU : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BaseClockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BoostClockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUnlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_Client.PcPart.Socket SocketField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BaseClock {
            get {
                return this.BaseClockField;
            }
            set {
                if ((this.BaseClockField.Equals(value) != true)) {
                    this.BaseClockField = value;
                    this.RaisePropertyChanged("BaseClock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BoostClock {
            get {
                return this.BoostClockField;
            }
            set {
                if ((this.BoostClockField.Equals(value) != true)) {
                    this.BoostClockField = value;
                    this.RaisePropertyChanged("BoostClock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUnlocked {
            get {
                return this.IsUnlockedField;
            }
            set {
                if ((this.IsUnlockedField.Equals(value) != true)) {
                    this.IsUnlockedField = value;
                    this.RaisePropertyChanged("IsUnlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelNumber {
            get {
                return this.ModelNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelNumberField, value) != true)) {
                    this.ModelNumberField = value;
                    this.RaisePropertyChanged("ModelNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_Client.PcPart.Socket Socket {
            get {
                return this.SocketField;
            }
            set {
                if ((object.ReferenceEquals(this.SocketField, value) != true)) {
                    this.SocketField = value;
                    this.RaisePropertyChanged("Socket");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Socket", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer.Hardware")]
    [System.SerializableAttribute()]
    public partial class Socket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArchitectureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SocketTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Architecture {
            get {
                return this.ArchitectureField;
            }
            set {
                if ((object.ReferenceEquals(this.ArchitectureField, value) != true)) {
                    this.ArchitectureField = value;
                    this.RaisePropertyChanged("Architecture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SocketType {
            get {
                return this.SocketTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SocketTypeField, value) != true)) {
                    this.SocketTypeField = value;
                    this.RaisePropertyChanged("SocketType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PcPart.IPcPartServise")]
    public interface IPcPartServise {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartServise/FindCPUsByBrand", ReplyAction="http://tempuri.org/IPcPartServise/FindCPUsByBrandResponse")]
        MVC_Client.PcPart.CPU[] FindCPUsByBrand(string Brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartServise/FindCPUsByBrand", ReplyAction="http://tempuri.org/IPcPartServise/FindCPUsByBrandResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindCPUsByBrandAsync(string Brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartServise/FindCPUsByCategory", ReplyAction="http://tempuri.org/IPcPartServise/FindCPUsByCategoryResponse")]
        MVC_Client.PcPart.CPU[] FindCPUsByCategory(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartServise/FindCPUsByCategory", ReplyAction="http://tempuri.org/IPcPartServise/FindCPUsByCategoryResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindCPUsByCategoryAsync(string Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartServise/FindAllCPUs", ReplyAction="http://tempuri.org/IPcPartServise/FindAllCPUsResponse")]
        MVC_Client.PcPart.CPU[] FindAllCPUs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPcPartServise/FindAllCPUs", ReplyAction="http://tempuri.org/IPcPartServise/FindAllCPUsResponse")]
        System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindAllCPUsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPcPartServiseChannel : MVC_Client.PcPart.IPcPartServise, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PcPartServiseClient : System.ServiceModel.ClientBase<MVC_Client.PcPart.IPcPartServise>, MVC_Client.PcPart.IPcPartServise {
        
        public PcPartServiseClient() {
        }
        
        public PcPartServiseClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PcPartServiseClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PcPartServiseClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PcPartServiseClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MVC_Client.PcPart.CPU[] FindCPUsByBrand(string Brand) {
            return base.Channel.FindCPUsByBrand(Brand);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindCPUsByBrandAsync(string Brand) {
            return base.Channel.FindCPUsByBrandAsync(Brand);
        }
        
        public MVC_Client.PcPart.CPU[] FindCPUsByCategory(string Category) {
            return base.Channel.FindCPUsByCategory(Category);
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindCPUsByCategoryAsync(string Category) {
            return base.Channel.FindCPUsByCategoryAsync(Category);
        }
        
        public MVC_Client.PcPart.CPU[] FindAllCPUs() {
            return base.Channel.FindAllCPUs();
        }
        
        public System.Threading.Tasks.Task<MVC_Client.PcPart.CPU[]> FindAllCPUsAsync() {
            return base.Channel.FindAllCPUsAsync();
        }
    }
}
